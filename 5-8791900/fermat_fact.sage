'''
To run: factor(n)
will produces the factors of n, along with the intermediate values generated by the
Fermat factoring technique
Fermat has trouble with some perfect squares
The prime check is to prevent unreasonably long runs
Fermat himself probably had tables of promes and perfect squares. 
'''

def Myfactor(n):
  fout = open("fermat_fact.out", 'w')

  #special cases
  if is_prime(n):
    fout.write(str(n) + " is prime")
    fout.close()
    return

  if n.is_square():
    r = sqrt(n)
    fout.write("Perfect Square: " + str(r) + " X " + str(r))
    fout.close()
    return
  
  #Fermat's Algorithm
  k = 1
  while(True):
    rsq = n+k^2
    fout.write(str(k) + " " + str(rsq) + '\n')
    if rsq.is_square():
      r = sqrt(rsq)
      fout.write("Factors: " + str(r+k) + " " + str(r-k))
      fout.close()
      break
    k = k + 1
        
