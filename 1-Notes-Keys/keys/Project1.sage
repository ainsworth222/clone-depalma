'''
Name: Paul De Palma
Class: CPSC 353
Date Submitted: January 24, 2021
Assignment: Project 1
Description: This program implements the transposition cipher
Notes: two of the functions are taken from the McAndrew text
'''

import random

#next two functiions are from McAndrew, p.57
'''
takes as parameter an ASCII-encoded upper case alphabtic string 
returns a list containing the positional value of each character
Usage: lst = str2lst("ABC") where lst = ['0','1','2'] after execution
'''
def str2lst(s):
    return [ord(ch) - 65 for ch in s]

'''
takes as a parameter a list of positional values (e.g. 'Y' is 24) of 
an ASCII string.  Returns the actual string (i.e., 'Y' instead of 24)
Usage: txt = lst2str(['0','1','2']), where txt = "ABC" after execution 
'''
def lst2str(lst):
    return (''.join([chr(int(ch) + 65) for ch in lst]))
    
'''
Generates and returns the encrpyt and decrypt key used in the transpostion
cipher
Usage: enc_key, dec_key = key_gen()
'''
def key_gen():
    alph = [num for num in range(26)]
    alphEP = [num for num in range(26)]
    alphDP = [num for num in range(26)]

    random.shuffle(alphEP)
    
    key_enc = [alph,alphEP]
    
    for i in range(26):
        alphDP[alphEP[i]] = alph[i]
       
    key_dec = [alph,alphDP]

    return key_enc, key_dec

'''
Returns cipherTxt corresponding to the encrypted plainTxt and the transposition 
cipher, key_enc
Usage: CT = encrypt(PT, key_enc) where PT is an upper case string and key_enc is
generated by key_gen()
'''
def encrypt(plainTxt,key_enc):
    plainLst = str2lst(plainTxt)

    cipherLst = [key_enc[1][elt] for elt in plainLst]

    return(lst2str(cipherLst))

'''
Returns PlainTxt corresponding to the decrypted cipherTxt and the transposition 
cipher, key_dec
Usage: PT = decrypt(CT, key_dec) where CT is generated by encrypt and key_dec is 
generated by key_gen()
'''
def decrypt(cipherTxt,key_dec):
    cipherLst = str2lst(cipherTxt)

    plainLst = [key_dec[1][elt] for elt in cipherLst]
    
    return(lst2str(plainLst))

