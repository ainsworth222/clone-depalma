mult = 256 

'''
msg is an ascii-encoded string, treated as a base 256 number where
the multiplier of the base is the positional value of the ascii character
in the message.  
returns the message as a base 10 integer
Ex. if the msg is ABC, the function returns 
65*256**2 + 66*256 + 67
'''
def str_to_num(msg):
    return str_to_num_a(0,msg)

def str_to_num_a(num,msg):
    if len(msg) == 0:
        return(num)
    return str_to_num_a(num + ord(msg[0]) * mult**(len(msg)-1), msg[1:])

'''
iterative alternative
def str_to_num(msg):
    num = 0
    exp = len(msg) - 1 
    for item in msg:
        num = num + ord(item) * mult**exp
        exp = exp - 1        
    return num
'''

'''
msg is the base ten version of the ascii-encoded string generated by
st_to_num.  Returns the ascii-encoded string
Ex. if the msg = 65*256**2 + 66*256 + 67, the function returns ABC
The is an adaptation of the well-known algorithm for converting from base
10 to base 2.
'''
def num_to_str(msg):
    return num_to_str_a(msg,[])

def num_to_str_a(msg,lst):
    if msg == 0:
        lst = [chr(elt) for elt in lst]
        lst.reverse()
        return ''.join(lst)
    lst.append(msg%mult)
    return(num_to_str_a(msg//mult,lst))

'''
iterative alternative
def num_to_str(msg):
    q = msg
    r_lst = []
    while (q > 0):
        q = msg//mult
        r_lst.append(msg % mult)
        msg = q
    r_lst.reverse()
    r_lst = [chr(elt) for elt in r_lst]
    return ''.join(r_lst)
'''
